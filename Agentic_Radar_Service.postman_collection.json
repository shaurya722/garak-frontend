{
  "info": {
    "name": "Agentic Radar Service API",
    "description": "Complete API collection for the Agentic Radar Service - scan agent workflows and generate PDF reports",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8009",
      "type": "string"
    },
    {
      "key": "scan_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Framework Information",
      "item": [
        {
          "name": "Get Supported Frameworks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/frameworks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "frameworks"]
            },
            "description": "Get list of all supported frameworks with descriptions and requirements"
          },
          "response": []
        },
        {
          "name": "Test Framework Support - AutoGen",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/test-framework/autogen",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "test-framework", "autogen"]
            },
            "description": "Test if AutoGen framework is supported by agentic-radar"
          },
          "response": []
        },
        {
          "name": "Test Framework Support - CrewAI",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/test-framework/crewai",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "test-framework", "crewai"]
            },
            "description": "Test if CrewAI framework is supported by agentic-radar"
          },
          "response": []
        },
        {
          "name": "Test Framework Support - LangGraph",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/test-framework/langgraph",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "test-framework", "langgraph"]
            },
            "description": "Test if LangGraph framework is supported by agentic-radar"
          },
          "response": []
        },
        {
          "name": "Get CrewAI Compatibility Guide",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/crewai-compatibility-guide",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "crewai-compatibility-guide"]
            },
            "description": "Get detailed guidance for CrewAI compatibility issues and best practices"
          },
          "response": []
        }
      ],
      "description": "Endpoints for getting framework information and testing compatibility"
    },
    {
      "name": "Scanning Workflow",
      "item": [
        {
          "name": "Scan AutoGen Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    pm.test('Scan successful', function () {",
                  "        pm.expect(response.message).to.include('Scan successful');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.report_url).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Scan failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "autogen",
                  "type": "text",
                  "description": "Framework type"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing AutoGen workflow code"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Upload and scan AutoGen workflow code. Supports both .py files and .ipynb notebooks."
          },
          "response": []
        },
        {
          "name": "Scan CrewAI Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    pm.test('Scan successful', function () {",
                  "        pm.expect(response.message).to.include('Scan successful');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.report_url).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Scan failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "crewai",
                  "type": "text",
                  "description": "Framework type"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing CrewAI workflow code"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Upload and scan CrewAI workflow code. Supports both .py files and .ipynb notebooks."
          },
          "response": []
        },
        {
          "name": "Scan LangGraph Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    pm.test('Scan successful', function () {",
                  "        pm.expect(response.message).to.include('Scan successful');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.report_url).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Scan failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "langgraph",
                  "type": "text",
                  "description": "Framework type"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing LangGraph workflow code"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Upload and scan LangGraph workflow code. Supports both .py files and .ipynb notebooks."
          },
          "response": []
        },
        {
          "name": "Scan OpenAI Agents Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    pm.test('Scan successful', function () {",
                  "        pm.expect(response.message).to.include('Scan successful');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.report_url).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Scan failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "openai-agents",
                  "type": "text",
                  "description": "Framework type"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing OpenAI Agents workflow code"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Upload and scan OpenAI Agents workflow code. Supports both .py files and .ipynb notebooks."
          },
          "response": []
        },
        {
          "name": "Scan n8n Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    pm.test('Scan successful', function () {",
                  "        pm.expect(response.message).to.include('Scan successful');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.report_url).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Scan failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([500]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "n8n",
                  "type": "text",
                  "description": "Framework type"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing n8n workflow code"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Upload and scan n8n workflow code."
          },
          "response": []
        }
      ],
      "description": "Main scanning workflow endpoints for different frameworks"
    },
    {
      "name": "Status & Reports",
      "item": [
        {
          "name": "Get Scan Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/status/{{scan_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "status", "{{scan_id}}"]
            },
            "description": "Get the current status of a scan operation. Status can be: scanning, converting_to_pdf, uploading, completed, error"
          },
          "response": []
        },
        {
          "name": "Get Report URL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/report/{{scan_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "report", "{{scan_id}}"]
            },
            "description": "Get the PDF report URL for a completed scan"
          },
          "response": []
        }
      ],
      "description": "Endpoints for checking scan status and retrieving reports"
    },
    {
      "name": "Complete Workflow Examples",
      "item": [
        {
          "name": "Full AutoGen Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the complete AutoGen workflow",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    ",
                  "    pm.test('AutoGen scan initiated successfully', function () {",
                  "        pm.expect(response.message).to.include('autogen');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.framework).to.equal('autogen');",
                  "    });",
                  "    ",
                  "    // Wait and check status",
                  "    setTimeout(() => {",
                  "        pm.sendRequest({",
                  "            url: pm.collectionVariables.get('base_url') + '/api/v1/status/' + response.scan_id,",
                  "            method: 'GET'",
                  "        }, (err, res) => {",
                  "            if (!err) {",
                  "                const statusResponse = res.json();",
                  "                console.log('Scan Status:', statusResponse.status);",
                  "            }",
                  "        });",
                  "    }, 2000);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "autogen",
                  "type": "text"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Complete AutoGen workflow with automatic status checking"
          },
          "response": []
        },
        {
          "name": "Full CrewAI Notebook Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test the complete CrewAI notebook workflow",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('scan_id', response.scan_id);",
                  "    ",
                  "    pm.test('CrewAI notebook scan successful', function () {",
                  "        pm.expect(response.message).to.include('crewai');",
                  "        pm.expect(response.scan_id).to.be.a('string');",
                  "        pm.expect(response.framework).to.equal('crewai');",
                  "        if (response.validation_info) {",
                  "            pm.expect(response.validation_info).to.include('crewai');",
                  "        }",
                  "    });",
                  "    ",
                  "    // Check for notebook conversions",
                  "    if (response.notebook_conversions) {",
                  "        pm.test('Notebook conversion detected', function () {",
                  "            pm.expect(response.notebook_conversions).to.be.an('array');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "framework",
                  "value": "crewai",
                  "type": "text"
                },
                {
                  "key": "zip_file",
                  "type": "file",
                  "src": [],
                  "description": "ZIP file containing CrewAI project with .ipynb notebooks"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/scan-and-generate-pdf/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "scan-and-generate-pdf", ""]
            },
            "description": "Complete CrewAI workflow with Jupyter notebook support"
          },
          "response": []
        }
      ],
      "description": "Complete end-to-end workflow examples with testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:8009');",
          "}"
        ]
      }
    }
  ]
}
