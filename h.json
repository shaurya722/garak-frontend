{
  "info": {
    "name": "Garak Enhanced Security Testing API - Tenant Enabled",
    "description": "Complete API collection for Garak security testing with enhanced detector framework, policy-based detector selection, enforcement actions, CI integration, and FULL TENANT ISOLATION. Features: 1) Multi-tenant data isolation with X-Tenant-ID headers, 2) Policy-based probe + detector management, 3) Custom detector creation and selection, 4) Confidence scoring with automated enforcement (ALLOW/SANITIZE/REFUSE/WARN), 5) Enhanced job analysis with detector outputs, 6) CI-friendly metrics and deployment blocking. Supports comprehensive AI security testing across 60+ probe categories with flexible detector integration.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "1"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:80",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "f860ba6b-94e5-4b44-acca-d23cbf4abb27",
      "type": "string",
      "description": "Tenant ID for multi-tenant isolation - REQUIRED for all endpoints"
    },
    {
      "key": "config_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "policy_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "detector_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "ci_status",
      "value": "",
      "type": "string"
    },
    {
      "key": "enhanced_policy_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "REST Configurations",
      "item": [
        {
          "name": "Create REST Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('config_id', response.config_id);",
                  "    pm.test('Config ID saved', function() {",
                  "        pm.expect(response.config_id).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"config_name\": \"GenAI Conversation API\",\n  \"description\": \"Production endpoint for security testing\",\n  \"rest_generator\": {\n    \"name\": \"garak-api\",\n    \"uri\": \"http://localhost:8000/genai/conversation/\",\n    \"method\": \"post\",\n    \"headers\": {\n      \"Authorization\": \"Bearer $KEY\",\n      \"Content-Type\": \"application/json\"\n    },\n    \"req_template_json_object\": {\n      \"message\": \"$INPUT\"\n    },\n    \"response_json\": true,\n    \"response_json_field\": \"response\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/rest-configs/",
              "host": ["{{base_url}}"],
              "path": ["rest-configs", ""]
            },
            "description": "Create a new REST configuration for testing LLM endpoints"
          },
          "response": []
        },
        {
          "name": "List All REST Configurations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/rest-configs/",
              "host": ["{{base_url}}"],
              "path": ["rest-configs", ""]
            },
            "description": "Get all saved REST configurations for current tenant"
          },
          "response": []
        },
        {
          "name": "Get REST Configuration",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/rest-configs/{{config_id}}",
              "host": ["{{base_url}}"],
              "path": ["rest-configs", "{{config_id}}"]
            },
            "description": "Get a specific REST configuration by its ID"
          },
          "response": []
        },
        {
          "name": "Update REST Configuration",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"config_name\": \"Updated GenAI API\",\n  \"description\": \"Updated description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/rest-configs/{{config_id}}",
              "host": ["{{base_url}}"],
              "path": ["rest-configs", "{{config_id}}"]
            },
            "description": "Partially update an existing REST configuration (all fields optional)"
          },
          "response": []
        },
        {
          "name": "Delete REST Configuration",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/rest-configs/{{config_id}}",
              "host": ["{{base_url}}"],
              "path": ["rest-configs", "{{config_id}}"]
            },
            "description": "Delete a REST configuration"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Policies",
      "item": [
        {
          "name": "Get Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/policies/categories",
              "host": ["{{base_url}}"],
              "path": ["policies", "categories"]
            },
            "description": "Get all available category names from database for policy creation"
          },
          "response": []
        },
        {
          "name": "Create Policy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('policy_id', response.policy_id);",
                  "    pm.test('Policy ID saved', function() {",
                  "        pm.expect(response.policy_id).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Content Safety Suite\",\n  \"description\": \"Comprehensive content safety testing\",\n  \"categories\": [\n    \"Content Safety & Toxicity\",\n    \"Jailbreaking & DAN Attacks\"\n  ],\n  \"is_default\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/policies/",
              "host": ["{{base_url}}"],
              "path": ["policies", ""]
            },
            "description": "Create a new policy with category-based probe selection"
          },
          "response": []
        },
        {
          "name": "List All Policies",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/policies/?skip=0&limit=10",
              "host": ["{{base_url}}"],
              "path": ["policies", ""],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all policies with pagination for current tenant"
          },
          "response": []
        },
        {
          "name": "Get Policy",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/policies/{{policy_id}}",
              "host": ["{{base_url}}"],
              "path": ["policies", "{{policy_id}}"]
            },
            "description": "Get a specific policy by its ID"
          },
          "response": []
        },
        {
          "name": "Update Policy",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Updated Content Safety Suite\",\n  \"description\": \"Updated comprehensive content safety testing\",\n  \"categories\": [\n    \"Content Safety & Toxicity\",\n    \"Jailbreaking & DAN Attacks\",\n    \"Prompt Injection\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/policies/{{policy_id}}",
              "host": ["{{base_url}}"],
              "path": ["policies", "{{policy_id}}"]
            },
            "description": "Update an existing policy"
          },
          "response": []
        },
        {
          "name": "Delete Policy",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/policies/{{policy_id}}",
              "host": ["{{base_url}}"],
              "path": ["policies", "{{policy_id}}"]
            },
            "description": "Delete a policy"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Detectors",
      "item": [
        {
          "name": "Get Builtin Detectors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/detectors/builtin",
              "host": ["{{base_url}}"],
              "path": ["detectors", "builtin"]
            },
            "description": "Get all builtin detector configurations (no tenant isolation needed)"
          },
          "response": []
        },
        {
          "name": "Get Detector Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/detectors/types",
              "host": ["{{base_url}}"],
              "path": ["detectors", "types"]
            },
            "description": "Get available detector types (no tenant isolation needed)"
          },
          "response": []
        },
        {
          "name": "Create Custom Detector",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('detector_id', response.detector_id);",
                  "    pm.test('Detector ID saved', function() {",
                  "        pm.expect(response.detector_id).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"detector_type\": \"REGEX\",\n  \"name\": \"API Key Detector\",\n  \"description\": \"Detects exposed API keys in responses\",\n  \"confidence_threshold\": 0.8,\n  \"patterns\": [\n    \"sk-[a-zA-Z0-9]{48}\",\n    \"Bearer [a-zA-Z0-9\\\\-._~+/]+=*\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/detectors/",
              "host": ["{{base_url}}"],
              "path": ["detectors", ""]
            },
            "description": "Create a new custom detector configuration"
          },
          "response": []
        },
        {
          "name": "List Custom Detectors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/detectors/?page=1&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["detectors", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get all custom detectors for current tenant with pagination"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Jobs",
      "item": [
        {
          "name": "Run Garak with Policy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('job_id', response.job_id);",
                  "    pm.test('Job ID saved', function() {",
                  "        pm.expect(response.job_id).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"model_type\": \"rest\",\n  \"rest_config_id\": \"{{config_id}}\",\n  \"policy_id\": \"{{policy_id}}\",\n  \"rest_api_key\": \"your-rest-api-key-here\",\n  \"generations\": 10,\n  \"eval_threshold\": 0.5\n}"
            },
            "url": {
              "raw": "{{base_url}}/run-garak",
              "host": ["{{base_url}}"],
              "path": ["run-garak"]
            },
            "description": "Run Garak security test with policy-based probe selection"
          },
          "response": []
        },
        {
          "name": "Run Garak with Manual Probes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('job_id', response.job_id);",
                  "    pm.test('Job ID saved', function() {",
                  "        pm.expect(response.job_id).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"model_type\": \"rest\",\n  \"rest_config_id\": \"{{config_id}}\",\n  \"probes\": [\"lmrc.Profanity\"],\n  \"rest_api_key\": \"your-rest-api-key-here\",\n  \"generations\": 10,\n  \"eval_threshold\": 0.5\n}"
            },
            "url": {
              "raw": "{{base_url}}/run-garak",
              "host": ["{{base_url}}"],
              "path": ["run-garak"]
            },
            "description": "Run Garak security test with manual probe selection"
          },
          "response": []
        },
        {
          "name": "Get Job Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/job/{{job_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["job", "{{job_id}}", "status"]
            },
            "description": "Get the current status of a Garak job"
          },
          "response": []
        },
        {
          "name": "Get Job Results",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/job/{{job_id}}/results",
              "host": ["{{base_url}}"],
              "path": ["job", "{{job_id}}", "results"]
            },
            "description": "Get the results of a completed Garak job"
          },
          "response": []
        },
        {
          "name": "Get Enhanced Job Results",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/job/{{job_id}}/enhanced",
              "host": ["{{base_url}}"],
              "path": ["job", "{{job_id}}", "enhanced"]
            },
            "description": "Get enhanced results with detector analysis and enforcement actions"
          },
          "response": []
        },
        {
          "name": "Get Job CI Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/job/{{job_id}}/ci-metrics",
              "host": ["{{base_url}}"],
              "path": ["job", "{{job_id}}", "ci-metrics"]
            },
            "description": "Get CI-friendly metrics for deployment decisions"
          },
          "response": []
        },
        {
          "name": "List All Jobs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/jobs?page=1&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get all jobs for current tenant with pagination"
          },
          "response": []
        },
        {
          "name": "Cancel Job",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text",
                "description": "Required for tenant isolation"
              }
            ],
            "url": {
              "raw": "{{base_url}}/job/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["job", "{{job_id}}"]
            },
            "description": "Cancel a running Garak job"
          },
          "response": []
        }
      ]
    }
  ]
}
